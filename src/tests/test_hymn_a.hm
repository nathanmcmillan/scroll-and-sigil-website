import console

const global = 123

interface Goo {
  var x: int
  var y
  var z

  function get()
  function set()
}

class Zoo implements Goo {
  constructor(x, flag = 2) {
    this.x = x
    this.y = "%{x}"
  }
}

# class functions are syntactic sugar for regular functions with `this`
function zoo.string() {
  return "(%{this.x}, %{this.y})"
}

function zoo.eat(num: int64) {
  this.x += num
}

# new object constructing
var x = new Thing(0, 1)

# optional type enforcement
function input(object: Zoo, num: int) {
  zoo.eat(num)
}

# constant or variables
const x = 0
var z = 0

# literal and formatted strings
var x = "formatted %{this.x}"
var y = 'not formatted'

# threading
const t = new Thread()

# fs
import fs
import path

var x = fs.read(path.get('c', 'file'))

function foo(x, y) {
  const list = []
  const table = {}
  if x != 0 {
    stdout(x)
  } else {
    y += 1
  }
  list.push(4)
  table['key'] = list
  return y
}

function bar() {
  for var i = 0, i < 10, i += 1 {
    if i < 0 { continue }
    const z = new Zoo(i)
    stdout(z)
  }
}

foo(2, 3)

# async
async function read(path) {
  var file = try {
    return io.open(path)
  } except {
    return null
  }
  contents = file.read()
  return contents
  label handle
  return none
}

var foo = fs.read("/home/foo.txt")
var bar = fs.read("/home/bar.txt")
stdout(await foo)
stderr(await bar)

# advanced logging
import console
console.log(a.near(b))
console.debug(a.near(b))
console.warn(a.near(b))
console.error(a.near(b))
